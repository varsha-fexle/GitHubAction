name: SFDX-CLI Deploy from Repository
on:
  pull_request:
    types: [opened]
    branches:
      - master

jobs:
  SFDX-CLI-Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16.x"

      - name: Install Dependencies
        run: |
          npm install sfdx-cli -g
          echo y | sfdx plugins:install sfdx-git-delta

      - name: Authenticate Dev Hub
        run: |
          echo ${{ secrets.DEVHUB_SFDX_URL }} > ./DEVHUB_SFDX_URL.txt
          sfdx force:auth:sfdxurl:store -f ./DEVHUB_SFDX_URL.txt -d -a devhub

      - name: Retrieve changes
        run: |
          git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
          git fetch --all
          git branch -a
          git --no-pager diff --name-status origin/master origin/master ":(exclude).github/workflows/push-action-deploy.yml"
          sfdx sgd:source:delta --to origin/master --from origin/master --repo . --output . -i .forceignore

      - name: Generate package.xml
        run: |
          git fetch origin master
          changedFiles=$(git diff --name-only origin/master)
          echo '<?xml version="1.0" encoding="UTF-8"?><Package xmlns="http://soap.sforce.com/2006/04/metadata">' > package.xml
          for file in $changedFiles; do
            echo "  <types>" >> package.xml
            if [[ $file == *".cls" ]]; then
              echo "    <members>*</members>" >> package.xml
              echo "    <name>ApexClass</name>" >> package.xml
            elif [[ $file == *".trigger" ]]; then
              echo "    <members>*</members>" >> package.xml
              echo "    <name>ApexTrigger</name>" >> package.xml
            elif [[ $file == *".page" ]]; then
              echo "    <members>*</members>" >> package.xml
              echo "    <name>ApexPage</name>" >> package.xml
            elif [[ $file == *".component" ]]; then
              echo "    <members>*</members>" >> package.xml
              echo "    <name>ApexComponent</name>" >> package.xml
            elif [[ $file == *".aura" ]]; then
              echo "    <members>*</members>" >> package.xml
              echo "    <name>AuraDefinitionBundle</name>" >> package.xml
            elif [[ $file == *".lwc" ]]; then
              echo "    <members>*</members>" >> package.xml
              echo "    <name>LigthningComponentBundle</name>" >> package.xml
            elif [[ $file == *"objects/"* ]]; then
              object=${file#*"objects/"}
              object=${object%%/*}
              echo "    <members>$object</members>" >> package.xml
              echo "    <name>CustomObject</name>" >> package.xml
            fi
            echo "  </types>" >> package.xml
          done
          echo "  <version>53.0</version>" >> package.xml
          echo "</Package>" >> package.xml
          cat package.xml


      - name: Display package.xml
        run: |
          cat package/package.xml

      - name: Display destructiveChanges.xml
        run: |
          cat destructiveChanges/destructiveChanges.xml

      - name: Convert source to metadata format
        run: |
          sfdx force:source:convert --outputdir convert --packagename package --manifest package/package.xml

      - name: Deploy code to devhub
        run: |
          sfdx force:mdapi:deploy --deploydir convert --testlevel RunLocalTests --checkonly -u devhub
